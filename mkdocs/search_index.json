{
    "docs": [
        {
            "location": "/", 
            "text": "siddhi-map-text\n\n\nThe \nsiddhi-map-text extension\n is an extension to \nSiddhi\n that provides the functionality to convert canonical events of the server in the WSO2Event format to any text message format and convert events of any text format to the server's canonical event format (WSO2Event) for processing.\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n1.0.3-SNAPSHOT\n.\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support. \n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.map.text\n/groupId\n\n        \nartifactId\nsiddhi-map-text\n/artifactId\n\n        \nversion\nx.x.x\n/version\n\n     \n/dependency\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\ntext\n \n(\nSource Mapper\n)\nThis extension is a text to Siddhi event source mapper. Transports that publish text messages can utilize this extension to convert the incoming text message to Siddhi events. Users can either use the \nonEventHandler\nwhich is a pre-defined text format where event conversion happens without any additional configurations, or specify a regex to map a text message using custom configurations.\n\n\ntext\n \n(\nSink Mapper\n)\nThis extension is a Text to Event input mapper. Transports that accept text messages can utilize this extension to convert the incoming text messages to Siddhi events. Users can use a pre-defined text format where event conversion is carried out without any additional configurations, or use placeholders to map from a custom text message.\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n. \n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome to WSO2 Siddhi Map Text"
        }, 
        {
            "location": "/#siddhi-map-text", 
            "text": "The  siddhi-map-text extension  is an extension to  Siddhi  that provides the functionality to convert canonical events of the server in the WSO2Event format to any text message format and convert events of any text format to the server's canonical event format (WSO2Event) for processing.  Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "siddhi-map-text"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  1.0.3-SNAPSHOT .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.     This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.         dependency \n         groupId org.wso2.extension.siddhi.map.text /groupId \n         artifactId siddhi-map-text /artifactId \n         version x.x.x /version \n      /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "text   ( Source Mapper ) This extension is a text to Siddhi event source mapper. Transports that publish text messages can utilize this extension to convert the incoming text message to Siddhi events. Users can either use the  onEventHandler which is a pre-defined text format where event conversion happens without any additional configurations, or specify a regex to map a text message using custom configurations.  text   ( Sink Mapper ) This extension is a Text to Event input mapper. Transports that accept text messages can utilize this extension to convert the incoming text messages to Siddhi events. Users can use a pre-defined text format where event conversion is carried out without any additional configurations, or use placeholders to map from a custom text message.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .     Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.     For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/1.0.3-SNAPSHOT/", 
            "text": "API Docs\n\n\nSourcemapper\n\n\ntext \n(\nSource Mapper\n)\n\n\nThis extension is a text to Siddhi event source mapper. Transports that publish text messages can utilize this extension to convert the incoming text message to Siddhi events. Users can either use the \nonEventHandler\nwhich is a pre-defined text format where event conversion happens without any additional configurations, or specify a regex to map a text message using custom configurations.\n\n\n\nSyntax\n\n\n@source(..., @map(type=\ntext\n, regex.groupid=\nSTRING\n, fail.on.missing.attribute=\nBOOL\n, event.grouping.enabled=\nBOOL\n, delimiter=\nSTRING\n, new.line.character=\nSTRING\n)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nregex.groupid\n\n        \nThis parameter specifies a regular expression group. The \ngroupid\n can be any capital letter (e.g., regex.A,regex.B .. etc). You can specify any number of regular expression groups. In the attribute annotation, you need to map all attributes to the regular expression group with the matching group index. If you need to to enable custom mapping, it is required to specifythe matching group for each and every attribute.\n\n        \n\n        \nSTRING\n\n        \nNo\n\n        \nNo\n\n    \n\n    \n\n        \nfail.on.missing.attribute\n\n        \nThis parameter specifies how unknown attributes should be handled. If it is set to\ntrue\n a message is dropped if its execution fails, or if one or more attributes do not have values. If this parameter is set to \nfalse\n, null values are assigned to attributes with missing values, and messages with such attributes are not dropped.\n\n        \ntrue\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nevent.grouping.enabled\n\n        \nThis parameter specifies whether event grouping is enabled or not. To receive a group of events together and generate multiple events, this parameter must be set to \ntrue\n.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelimiter\n\n        \nThis parameter specifies how events must be separated when multiple events are received. This must be whole line and not a single character.\n\n        \n~~~~~~~~~~\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nnew.line.character\n\n        \nThis attribute indicates the new line character of the event that is expected to be received. This is used mostly when communication between 2 types of operating systems is expected. For example, Linux uses '\n' as the end of line character whereas windows uses '\n\n'.\n\n        \n\n\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@source(type='inMemory', topic='stock', @map(type='text'))\ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nThis query performs a default text input mapping. The expected input is as follows:symbol:\"WSO2\",\nprice:55.6,\nvolume:100ORsymbol:'WSO2',\nprice:55.6,\nvolume:100If group events is enabled then input should be as follows,symbol:'WSO2',\nprice:55.6,\nvolume:100\n~~~~~~~~~~\nsymbol:'WSO2',\nprice:55.6,\nvolume:100\n\n\n\nEXAMPLE 2\n\n\n@source(type='inMemory', topic='stock', @map(type='text', fail.on.unknown.attribute = 'true', regex.A='(\\w+)\\s([-0-9]+)',regex.B='volume\\s([-0-9]+)', @attributes(symbol = 'A[1]',price = 'A[2]',volume = 'B' )\n\n\n\n\nThis query performs a custom text mapping. The expected output is as follows:wos2 550 volume 100\n\n\n\nSinkmapper\n\n\ntext \n(\nSink Mapper\n)\n\n\nThis extension is a Text to Event input mapper. Transports that accept text messages can utilize this extension to convert the incoming text messages to Siddhi events. Users can use a pre-defined text format where event conversion is carried out without any additional configurations, or use placeholders to map from a custom text message.\n\n\n\nSyntax\n\n\n@sink(..., @map(type=\ntext\n, event.grouping.enabled=\nBOOL\n, delimiter=\nSTRING\n, new.line.character=\nSTRING\n)\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nevent.grouping.enabled\n\n        \nIf this parameter is set to \ntrue\n, events are grouped via a delimiter when multiple events are received. It is required to specify a value for the \ndelimiter\n parameter when the value for this parameter is \ntrue\n.\n\n        \nfalse\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ndelimiter\n\n        \nThis parameter specifies how events are separated when a grouped event is received. This must be a whole line and not a single character.\n\n        \n~~~~~~~~~~\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nnew.line.character\n\n        \nThis attribute indicates the new line character of the event that is expected to be received. This is used mostly when communication between 2 types of operating systems is expected. For example, Linux uses '\n' whereas Windows uses '\n\n'as the end of line character.\n\n        \n\n\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@sink(type='inMemory', topic='stock', @map(type='text'))\ndefine stream FooStream (symbol string, price float, volume long);\n\n\n\n\n\nThis query performs a default text input mapping. The expected output is as follows:symbol:\"WSO2\",\nprice:55.6,\nvolume:100orsymbol:'WSO2',\nprice:55.6,\nvolume:100If event grouping is enabled, then the output is as follows:symbol:'WSO2',\nprice:55.6,\nvolume:100\n~~~~~~~~~~\nsymbol:'WSO2',\nprice:55.6,\nvolume:100\n\n\n\nEXAMPLE 2\n\n\n@sink(type='inMemory', topic='stock', @map(type='text',  @payload(SensorID : {{symbol}}/{{Volume}},\nSensorPrice : Rs{{price}}/=,\nValue : {{Volume}}ml\u201d)))\n\n\n\n\nThis query performs a custom text mapping. The output is as follows:SensorID : wso2/100,\nSensorPrice : Rs1000/=,\nValue : 100mlfor the following siddhi event.{wso2,1000,100}", 
            "title": "1.0.3-SNAPSHOT"
        }, 
        {
            "location": "/api/1.0.3-SNAPSHOT/#api-docs", 
            "text": "", 
            "title": "API Docs"
        }, 
        {
            "location": "/api/1.0.3-SNAPSHOT/#sourcemapper", 
            "text": "", 
            "title": "Sourcemapper"
        }, 
        {
            "location": "/api/1.0.3-SNAPSHOT/#text-source-mapper", 
            "text": "This extension is a text to Siddhi event source mapper. Transports that publish text messages can utilize this extension to convert the incoming text message to Siddhi events. Users can either use the  onEventHandler which is a pre-defined text format where event conversion happens without any additional configurations, or specify a regex to map a text message using custom configurations.  Syntax  @source(..., @map(type= text , regex.groupid= STRING , fail.on.missing.attribute= BOOL , event.grouping.enabled= BOOL , delimiter= STRING , new.line.character= STRING )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         regex.groupid \n         This parameter specifies a regular expression group. The  groupid  can be any capital letter (e.g., regex.A,regex.B .. etc). You can specify any number of regular expression groups. In the attribute annotation, you need to map all attributes to the regular expression group with the matching group index. If you need to to enable custom mapping, it is required to specifythe matching group for each and every attribute. \n         \n         STRING \n         No \n         No \n     \n     \n         fail.on.missing.attribute \n         This parameter specifies how unknown attributes should be handled. If it is set to true  a message is dropped if its execution fails, or if one or more attributes do not have values. If this parameter is set to  false , null values are assigned to attributes with missing values, and messages with such attributes are not dropped. \n         true \n         BOOL \n         Yes \n         No \n     \n     \n         event.grouping.enabled \n         This parameter specifies whether event grouping is enabled or not. To receive a group of events together and generate multiple events, this parameter must be set to  true . \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         delimiter \n         This parameter specifies how events must be separated when multiple events are received. This must be whole line and not a single character. \n         ~~~~~~~~~~ \n         STRING \n         Yes \n         No \n     \n     \n         new.line.character \n         This attribute indicates the new line character of the event that is expected to be received. This is used mostly when communication between 2 types of operating systems is expected. For example, Linux uses ' ' as the end of line character whereas windows uses ' '. \n          \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @source(type='inMemory', topic='stock', @map(type='text'))\ndefine stream FooStream (symbol string, price float, volume long);  This query performs a default text input mapping. The expected input is as follows:symbol:\"WSO2\", price:55.6, volume:100ORsymbol:'WSO2', price:55.6, volume:100If group events is enabled then input should be as follows,symbol:'WSO2', price:55.6, volume:100 ~~~~~~~~~~ symbol:'WSO2', price:55.6, volume:100  EXAMPLE 2  @source(type='inMemory', topic='stock', @map(type='text', fail.on.unknown.attribute = 'true', regex.A='(\\w+)\\s([-0-9]+)',regex.B='volume\\s([-0-9]+)', @attributes(symbol = 'A[1]',price = 'A[2]',volume = 'B' )  This query performs a custom text mapping. The expected output is as follows:wos2 550 volume 100", 
            "title": "text (Source Mapper"
        }, 
        {
            "location": "/api/1.0.3-SNAPSHOT/#sinkmapper", 
            "text": "", 
            "title": "Sinkmapper"
        }, 
        {
            "location": "/api/1.0.3-SNAPSHOT/#text-sink-mapper", 
            "text": "This extension is a Text to Event input mapper. Transports that accept text messages can utilize this extension to convert the incoming text messages to Siddhi events. Users can use a pre-defined text format where event conversion is carried out without any additional configurations, or use placeholders to map from a custom text message.  Syntax  @sink(..., @map(type= text , event.grouping.enabled= BOOL , delimiter= STRING , new.line.character= STRING )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         event.grouping.enabled \n         If this parameter is set to  true , events are grouped via a delimiter when multiple events are received. It is required to specify a value for the  delimiter  parameter when the value for this parameter is  true . \n         false \n         BOOL \n         Yes \n         No \n     \n     \n         delimiter \n         This parameter specifies how events are separated when a grouped event is received. This must be a whole line and not a single character. \n         ~~~~~~~~~~ \n         STRING \n         Yes \n         No \n     \n     \n         new.line.character \n         This attribute indicates the new line character of the event that is expected to be received. This is used mostly when communication between 2 types of operating systems is expected. For example, Linux uses ' ' whereas Windows uses ' 'as the end of line character. \n          \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @sink(type='inMemory', topic='stock', @map(type='text'))\ndefine stream FooStream (symbol string, price float, volume long);  This query performs a default text input mapping. The expected output is as follows:symbol:\"WSO2\", price:55.6, volume:100orsymbol:'WSO2', price:55.6, volume:100If event grouping is enabled, then the output is as follows:symbol:'WSO2', price:55.6, volume:100 ~~~~~~~~~~ symbol:'WSO2', price:55.6, volume:100  EXAMPLE 2  @sink(type='inMemory', topic='stock', @map(type='text',  @payload(SensorID : {{symbol}}/{{Volume}},\nSensorPrice : Rs{{price}}/=,\nValue : {{Volume}}ml\u201d)))  This query performs a custom text mapping. The output is as follows:SensorID : wso2/100, SensorPrice : Rs1000/=, Value : 100mlfor the following siddhi event.{wso2,1000,100}", 
            "title": "text (Sink Mapper"
        }, 
        {
            "location": "/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}